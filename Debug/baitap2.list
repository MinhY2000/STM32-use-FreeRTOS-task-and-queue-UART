
baitap2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005070  08005070  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005070  08005070  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005070  08005070  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000010  08005088  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000107c  08005088  0002107c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012277  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1b  00000000  00000000  000322f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbd  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012d19  00000000  00000000  00037075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140d1  00000000  00000000  00049d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007222b  00000000  00000000  0005de5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004998  00000000  00000000  000d008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d4a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f70 	.word	0x08004f70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004f70 	.word	0x08004f70

08000210 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	4a06      	ldr	r2, [pc, #24]	; (8000238 <vApplicationGetIdleTaskMemory+0x28>)
 8000220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <vApplicationGetIdleTaskMemory+0x2c>)
 8000226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2280      	movs	r2, #128	; 0x80
 800022c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	2000002c 	.word	0x2000002c
 800023c:	20000080 	.word	0x20000080

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b09a      	sub	sp, #104	; 0x68
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fb7e 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f85d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f8c1 	bl	80003d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000252:	f000 f895 	bl	8000380 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue */
  osMessageQDef(Queue, 16, uint16_t);
 8000256:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <main+0xa8>)
 8000258:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800025c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800025e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueHandle = osMessageCreate(osMessageQ(Queue), NULL);
 8000262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fcc8 	bl	8002bfe <osMessageCreate>
 800026e:	4603      	mov	r3, r0
 8000270:	4a1e      	ldr	r2, [pc, #120]	; (80002ec <main+0xac>)
 8000272:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskUART */
  osThreadDef(TaskUART, StartTaskUART, osPriorityNormal, 0, 128);
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <main+0xb0>)
 8000276:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUARTHandle = osThreadCreate(osThread(TaskUART), NULL);
 8000288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fc55 	bl	8002b3e <osThreadCreate>
 8000294:	4603      	mov	r3, r0
 8000296:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <main+0xb4>)
 8000298:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskLED */
  osThreadDef(TaskLED, StartTaskLED, osPriorityIdle, 0, 128);
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <main+0xb8>)
 800029c:	f107 0420 	add.w	r4, r7, #32
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLEDHandle = osThreadCreate(osThread(TaskLED), NULL);
 80002ae:	f107 0320 	add.w	r3, r7, #32
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fc42 	bl	8002b3e <osThreadCreate>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <main+0xbc>)
 80002be:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskButton */
  osThreadDef(TaskButton, StartTaskButton, osPriorityIdle, 0, 128);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <main+0xc0>)
 80002c2:	1d3c      	adds	r4, r7, #4
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskButtonHandle = osThreadCreate(osThread(TaskButton), NULL);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fc31 	bl	8002b3e <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a09      	ldr	r2, [pc, #36]	; (8000304 <main+0xc4>)
 80002e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002e2:	f002 fc25 	bl	8002b30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <main+0xa6>
 80002e8:	08004f88 	.word	0x08004f88
 80002ec:	200002d4 	.word	0x200002d4
 80002f0:	08004fa4 	.word	0x08004fa4
 80002f4:	200002c8 	.word	0x200002c8
 80002f8:	08004fc8 	.word	0x08004fc8
 80002fc:	200002cc 	.word	0x200002cc
 8000300:	08004ff0 	.word	0x08004ff0
 8000304:	200002d0 	.word	0x200002d0

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	; 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 fde8 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f000 fe88 	bl	8001054 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800034a:	f000 f9a5 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 f8f6 	bl	8001558 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f991 	bl	8000698 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	; 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART2_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800038c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b8:	f001 fcc4 	bl	8001d44 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f969 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000280 	.word	0x20000280
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_GPIO_Init+0xb4>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <MX_GPIO_Init+0xb4>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0xb4>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	481b      	ldr	r0, [pc, #108]	; (800048c <MX_GPIO_Init+0xb8>)
 8000420:	f000 fde7 	bl	8000ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2102      	movs	r1, #2
 8000428:	4819      	ldr	r0, [pc, #100]	; (8000490 <MX_GPIO_Init+0xbc>)
 800042a:	f000 fde2 	bl	8000ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2302      	movs	r3, #2
 800043e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4619      	mov	r1, r3
 8000446:	4811      	ldr	r0, [pc, #68]	; (800048c <MX_GPIO_Init+0xb8>)
 8000448:	f000 fc38 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	4619      	mov	r1, r3
 800045e:	480c      	ldr	r0, [pc, #48]	; (8000490 <MX_GPIO_Init+0xbc>)
 8000460:	f000 fc2c 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000464:	2302      	movs	r3, #2
 8000466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_GPIO_Init+0xbc>)
 800047c:	f000 fc1e 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000480:	bf00      	nop
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	40010800 	.word	0x40010800

08000494 <StartTaskUART>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskUART */
void StartTaskUART(void const * argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int Tx_data_Queue;
	uint8_t temp[12]={};
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart2, rx_data, sizeof(rx_data));
 80004aa:	220c      	movs	r2, #12
 80004ac:	492a      	ldr	r1, [pc, #168]	; (8000558 <StartTaskUART+0xc4>)
 80004ae:	482b      	ldr	r0, [pc, #172]	; (800055c <StartTaskUART+0xc8>)
 80004b0:	f001 fd1b 	bl	8001eea <HAL_UART_Receive_IT>

	  if(memcmp(rx_data,"ON\CR\LF    ",sizeof(int)))
 80004b4:	2204      	movs	r2, #4
 80004b6:	492a      	ldr	r1, [pc, #168]	; (8000560 <StartTaskUART+0xcc>)
 80004b8:	4827      	ldr	r0, [pc, #156]	; (8000558 <StartTaskUART+0xc4>)
 80004ba:	f004 fd07 	bl	8004ecc <memcmp>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d015      	beq.n	80004f0 <StartTaskUART+0x5c>
	  {
		  Tx_data_Queue=5;
 80004c4:	2305      	movs	r3, #5
 80004c6:	617b      	str	r3, [r7, #20]
		  osMessagePut(QueueHandle, Tx_data_Queue, 100);
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <StartTaskUART+0xd0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6979      	ldr	r1, [r7, #20]
 80004ce:	2264      	movs	r2, #100	; 0x64
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fbbd 	bl	8002c50 <osMessagePut>
		  strcpy(rx_data,temp);
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4619      	mov	r1, r3
 80004dc:	481e      	ldr	r0, [pc, #120]	; (8000558 <StartTaskUART+0xc4>)
 80004de:	f004 fd31 	bl	8004f44 <strcpy>
		  HAL_UART_Transmit(&huart2, rx_data, sizeof(rx_data), 100);
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	220c      	movs	r2, #12
 80004e6:	491c      	ldr	r1, [pc, #112]	; (8000558 <StartTaskUART+0xc4>)
 80004e8:	481c      	ldr	r0, [pc, #112]	; (800055c <StartTaskUART+0xc8>)
 80004ea:	f001 fc7b 	bl	8001de4 <HAL_UART_Transmit>
 80004ee:	e02e      	b.n	800054e <StartTaskUART+0xba>
//		  memset(rx_data,0, sizeof(int));
	  }
	  else if(memcmp(rx_data,"OFF\CR\LF   ",sizeof(int)))
 80004f0:	2204      	movs	r2, #4
 80004f2:	491d      	ldr	r1, [pc, #116]	; (8000568 <StartTaskUART+0xd4>)
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <StartTaskUART+0xc4>)
 80004f6:	f004 fce9 	bl	8004ecc <memcmp>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00f      	beq.n	8000520 <StartTaskUART+0x8c>
	  {
//		  HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 100);
		  Tx_data_Queue=6;
 8000500:	2306      	movs	r3, #6
 8000502:	617b      	str	r3, [r7, #20]
		  osMessagePut(QueueHandle, Tx_data_Queue, 100);
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <StartTaskUART+0xd0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6979      	ldr	r1, [r7, #20]
 800050a:	2264      	movs	r2, #100	; 0x64
 800050c:	4618      	mov	r0, r3
 800050e:	f002 fb9f 	bl	8002c50 <osMessagePut>
		  strcpy(rx_data,temp);
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	4619      	mov	r1, r3
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <StartTaskUART+0xc4>)
 800051a:	f004 fd13 	bl	8004f44 <strcpy>
 800051e:	e016      	b.n	800054e <StartTaskUART+0xba>
//		  memset(rx_data,0, sizeof(int));
	  }
	  else if(memcmp(rx_data,"TOOGLE\CR\LF",sizeof(int)))
 8000520:	2204      	movs	r2, #4
 8000522:	4912      	ldr	r1, [pc, #72]	; (800056c <StartTaskUART+0xd8>)
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <StartTaskUART+0xc4>)
 8000526:	f004 fcd1 	bl	8004ecc <memcmp>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00e      	beq.n	800054e <StartTaskUART+0xba>
	  {
//		  HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 100);
		  Tx_data_Queue=7;
 8000530:	2307      	movs	r3, #7
 8000532:	617b      	str	r3, [r7, #20]
		  osMessagePut(QueueHandle, Tx_data_Queue, 100);
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <StartTaskUART+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6979      	ldr	r1, [r7, #20]
 800053a:	2264      	movs	r2, #100	; 0x64
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fb87 	bl	8002c50 <osMessagePut>
		  strcpy(rx_data,temp);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	4619      	mov	r1, r3
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <StartTaskUART+0xc4>)
 800054a:	f004 fcfb 	bl	8004f44 <strcpy>
//		  memset(rx_data,0, sizeof(int));
	  }

    osDelay(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f002 fb41 	bl	8002bd6 <osDelay>
	  HAL_UART_Receive_IT(&huart2, rx_data, sizeof(rx_data));
 8000554:	e7a9      	b.n	80004aa <StartTaskUART+0x16>
 8000556:	bf00      	nop
 8000558:	200002d8 	.word	0x200002d8
 800055c:	20000280 	.word	0x20000280
 8000560:	0800500c 	.word	0x0800500c
 8000564:	200002d4 	.word	0x200002d4
 8000568:	08005018 	.word	0x08005018
 800056c:	08005024 	.word	0x08005024

08000570 <StartTaskLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void const * argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	osEvent value;
	int Rx_data=0;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN StartTaskLED */
  /* Infinite loop */
  for(;;)
  {
	  value=osMessageGet(QueueHandle, 100);
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <StartTaskLED+0x74>)
 800057e:	6819      	ldr	r1, [r3, #0]
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2264      	movs	r2, #100	; 0x64
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fba2 	bl	8002cd0 <osMessageGet>
	  Rx_data=value.value.p;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	617b      	str	r3, [r7, #20]
	  switch (Rx_data)
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2b07      	cmp	r3, #7
 8000594:	d015      	beq.n	80005c2 <StartTaskLED+0x52>
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b07      	cmp	r3, #7
 800059a:	dc17      	bgt.n	80005cc <StartTaskLED+0x5c>
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	2b05      	cmp	r3, #5
 80005a0:	d003      	beq.n	80005aa <StartTaskLED+0x3a>
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	2b06      	cmp	r3, #6
 80005a6:	d006      	beq.n	80005b6 <StartTaskLED+0x46>
 80005a8:	e010      	b.n	80005cc <StartTaskLED+0x5c>
	  {
	  case 5:
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2102      	movs	r1, #2
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <StartTaskLED+0x78>)
 80005b0:	f000 fd1f 	bl	8000ff2 <HAL_GPIO_WritePin>
		  break;
 80005b4:	e012      	b.n	80005dc <StartTaskLED+0x6c>
	  case 6:
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2102      	movs	r1, #2
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <StartTaskLED+0x78>)
 80005bc:	f000 fd19 	bl	8000ff2 <HAL_GPIO_WritePin>
	  		  break;
 80005c0:	e00c      	b.n	80005dc <StartTaskLED+0x6c>
	  case 7:
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005c2:	2102      	movs	r1, #2
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <StartTaskLED+0x78>)
 80005c6:	f000 fd2c 	bl	8001022 <HAL_GPIO_TogglePin>
	  		  break;
 80005ca:	e007      	b.n	80005dc <StartTaskLED+0x6c>
	  default:
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, Rx_data);
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	2102      	movs	r1, #2
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <StartTaskLED+0x78>)
 80005d6:	f000 fd0c 	bl	8000ff2 <HAL_GPIO_WritePin>
		  break;
 80005da:	bf00      	nop
	  }
	  osDelay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f002 fafa 	bl	8002bd6 <osDelay>
	  value=osMessageGet(QueueHandle, 100);
 80005e2:	e7cb      	b.n	800057c <StartTaskLED+0xc>
 80005e4:	200002d4 	.word	0x200002d4
 80005e8:	40010800 	.word	0x40010800

080005ec <StartTaskButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButton */
void StartTaskButton(void const * argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int Tx_data=HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80005f4:	2101      	movs	r1, #1
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <StartTaskButton+0x50>)
 80005f8:	f000 fce4 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN StartTaskButton */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0)
 8000600:	2101      	movs	r1, #1
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <StartTaskButton+0x50>)
 8000604:	f000 fcde 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d111      	bne.n	8000632 <StartTaskButton+0x46>
	  {
		  while (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){}
 800060e:	bf00      	nop
 8000610:	2101      	movs	r1, #1
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <StartTaskButton+0x50>)
 8000614:	f000 fcd6 	bl	8000fc4 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f8      	beq.n	8000610 <StartTaskButton+0x24>
		  Tx_data =~ Tx_data;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	43db      	mvns	r3, r3
 8000622:	60fb      	str	r3, [r7, #12]
		  osMessagePut(QueueHandle, Tx_data, 100);
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <StartTaskButton+0x54>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68f9      	ldr	r1, [r7, #12]
 800062a:	2264      	movs	r2, #100	; 0x64
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fb0f 	bl	8002c50 <osMessagePut>
	  }
    osDelay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f002 facf 	bl	8002bd6 <osDelay>
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0)
 8000638:	e7e2      	b.n	8000600 <StartTaskButton+0x14>
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800
 8000640:	200002d4 	.word	0x200002d4

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 f983 	bl	8000960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40012c00 	.word	0x40012c00

08000668 <HAL_UART_RxCpltCallback>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <HAL_UART_RxCpltCallback+0x24>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d104      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x1c>
    {
    	HAL_UART_Receive_IT(&huart2, rx_data, sizeof(rx_data));
 800067a:	220c      	movs	r2, #12
 800067c:	4904      	ldr	r1, [pc, #16]	; (8000690 <HAL_UART_RxCpltCallback+0x28>)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_UART_RxCpltCallback+0x2c>)
 8000680:	f001 fc33 	bl	8001eea <HAL_UART_Receive_IT>
    }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004400 	.word	0x40004400
 8000690:	200002d8 	.word	0x200002d8
 8000694:	20000280 	.word	0x20000280

08000698 <Error_Handler>:
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <HAL_MspInit+0x68>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <HAL_MspInit+0x68>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_MspInit+0x68>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_MspInit+0x68>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <HAL_MspInit+0x68>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_MspInit+0x68>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	210f      	movs	r1, #15
 80006de:	f06f 0001 	mvn.w	r0, #1
 80006e2:	f000 fa0e 	bl	8000b02 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_MspInit+0x6c>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_MspInit+0x6c>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <HAL_UART_MspInit+0x98>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d137      	bne.n	80007a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	61d3      	str	r3, [r2, #28]
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_UART_MspInit+0x9c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000764:	2304      	movs	r3, #4
 8000766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <HAL_UART_MspInit+0xa0>)
 8000778:	f000 faa0 	bl	8000cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077c:	2308      	movs	r3, #8
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_UART_MspInit+0xa0>)
 8000790:	f000 fa94 	bl	8000cbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2105      	movs	r1, #5
 8000798:	2026      	movs	r0, #38	; 0x26
 800079a:	f000 f9b2 	bl	8000b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079e:	2026      	movs	r0, #38	; 0x26
 80007a0:	f000 f9cb 	bl	8000b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40004400 	.word	0x40004400
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <HAL_InitTick+0xd0>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <HAL_InitTick+0xd0>)
 80007d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <HAL_InitTick+0xd0>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 ffed 	bl	80017d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007f6:	f000 ffd7 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 80007fa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <HAL_InitTick+0xd4>)
 8000800:	fba2 2303 	umull	r2, r3, r2, r3
 8000804:	0c9b      	lsrs	r3, r3, #18
 8000806:	3b01      	subs	r3, #1
 8000808:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <HAL_InitTick+0xd8>)
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <HAL_InitTick+0xdc>)
 800080e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_InitTick+0xd8>)
 8000812:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000816:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000818:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <HAL_InitTick+0xd8>)
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_InitTick+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_InitTick+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_InitTick+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <HAL_InitTick+0xd8>)
 8000832:	f001 f817 	bl	8001864 <HAL_TIM_Base_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800083c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000840:	2b00      	cmp	r3, #0
 8000842:	d11b      	bne.n	800087c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000844:	4812      	ldr	r0, [pc, #72]	; (8000890 <HAL_InitTick+0xd8>)
 8000846:	f001 f865 	bl	8001914 <HAL_TIM_Base_Start_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000858:	2019      	movs	r0, #25
 800085a:	f000 f96e 	bl	8000b3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d808      	bhi.n	8000876 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2019      	movs	r0, #25
 800086a:	f000 f94a 	bl	8000b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_InitTick+0xe0>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e002      	b.n	800087c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800087c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000880:	4618      	mov	r0, r3
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	431bde83 	.word	0x431bde83
 8000890:	200002e4 	.word	0x200002e4
 8000894:	40012c00 	.word	0x40012c00
 8000898:	20000004 	.word	0x20000004

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
	...

080008c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008ce:	f001 f87b 	bl	80019c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200002e4 	.word	0x200002e4

080008dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <USART2_IRQHandler+0x10>)
 80008e2:	f001 fb27 	bl	8001f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000280 	.word	0x20000280

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f004 fae9 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc89 	bl	8000240 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000938:	08005078 	.word	0x08005078
  ldr r2, =_sbss
 800093c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000940:	2000107c 	.word	0x2000107c

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f8ce 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000950:	200f      	movs	r0, #15
 8000952:	f7ff ff31 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000956:	f7ff fea5 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000008 	.word	0x20000008
 8000980:	2000032c 	.word	0x2000032c

08000984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	2000032c 	.word	0x2000032c

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4906      	ldr	r1, [pc, #24]	; (8000a30 <__NVIC_EnableIRQ+0x34>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff4f 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff64 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ffb2 	bl	8000a88 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff81 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff57 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d008      	beq.n	8000b80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2204      	movs	r2, #4
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e020      	b.n	8000bc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 020e 	bic.w	r2, r2, #14
 8000b8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0201 	bic.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d005      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2204      	movs	r2, #4
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e051      	b.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 020e 	bic.w	r2, r2, #14
 8000bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0201 	bic.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_DMA_Abort_IT+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d029      	beq.n	8000c6e <HAL_DMA_Abort_IT+0xa2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_DMA_Abort_IT+0xd8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d022      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x9e>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_DMA_Abort_IT+0xdc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01a      	beq.n	8000c64 <HAL_DMA_Abort_IT+0x98>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_DMA_Abort_IT+0xe0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d012      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x92>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_DMA_Abort_IT+0xe4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00a      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x8c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <HAL_DMA_Abort_IT+0xe8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d102      	bne.n	8000c52 <HAL_DMA_Abort_IT+0x86>
 8000c4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c50:	e00e      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c56:	e00b      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	e008      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	e005      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	e002      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	e000      	b.n	8000c70 <HAL_DMA_Abort_IT+0xa4>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4a11      	ldr	r2, [pc, #68]	; (8000cb8 <HAL_DMA_Abort_IT+0xec>)
 8000c72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4798      	blx	r3
    } 
  }
  return status;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40020008 	.word	0x40020008
 8000ca4:	4002001c 	.word	0x4002001c
 8000ca8:	40020030 	.word	0x40020030
 8000cac:	40020044 	.word	0x40020044
 8000cb0:	40020058 	.word	0x40020058
 8000cb4:	4002006c 	.word	0x4002006c
 8000cb8:	40020000 	.word	0x40020000

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	; 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4918      	ldr	r1, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	; 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001002:	787b      	ldrb	r3, [r7, #1]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100e:	e003      	b.n	8001018 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43d9      	mvns	r1, r3
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	400b      	ands	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e272      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8087 	beq.w	8001182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001074:	4b92      	ldr	r3, [pc, #584]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b04      	cmp	r3, #4
 800107e:	d00c      	beq.n	800109a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001080:	4b8f      	ldr	r3, [pc, #572]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b08      	cmp	r3, #8
 800108a:	d112      	bne.n	80010b2 <HAL_RCC_OscConfig+0x5e>
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d10b      	bne.n	80010b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	4b89      	ldr	r3, [pc, #548]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d06c      	beq.n	8001180 <HAL_RCC_OscConfig+0x12c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d168      	bne.n	8001180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e24c      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x76>
 80010bc:	4b80      	ldr	r3, [pc, #512]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a7f      	ldr	r2, [pc, #508]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e02e      	b.n	8001128 <HAL_RCC_OscConfig+0xd4>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x98>
 80010d2:	4b7b      	ldr	r3, [pc, #492]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a7a      	ldr	r2, [pc, #488]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b78      	ldr	r3, [pc, #480]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a77      	ldr	r2, [pc, #476]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e01d      	b.n	8001128 <HAL_RCC_OscConfig+0xd4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0xbc>
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a71      	ldr	r2, [pc, #452]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6e      	ldr	r2, [pc, #440]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0xd4>
 8001110:	4b6b      	ldr	r3, [pc, #428]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a6a      	ldr	r2, [pc, #424]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a67      	ldr	r2, [pc, #412]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fc28 	bl	8000984 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fc24 	bl	8000984 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e200      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xe4>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fc14 	bl	8000984 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fc10 	bl	8000984 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1ec      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x10c>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118e:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800119a:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d11c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x18c>
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x176>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e1c0      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4939      	ldr	r1, [pc, #228]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e03a      	b.n	8001256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fbc9 	bl	8000984 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fbc5 	bl	8000984 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1a1      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4927      	ldr	r1, [pc, #156]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_RCC_OscConfig+0x270>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fba8 	bl	8000984 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fba4 	bl	8000984 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e180      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d019      	beq.n	800129e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_RCC_OscConfig+0x274>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff fb88 	bl	8000984 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fb84 	bl	8000984 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e160      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_RCC_OscConfig+0x26c>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 fac6 	bl	8001828 <RCC_Delay>
 800129c:	e01c      	b.n	80012d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_RCC_OscConfig+0x274>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb6e 	bl	8000984 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012aa:	e00f      	b.n	80012cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fb6a 	bl	8000984 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d908      	bls.n	80012cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e146      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	42420000 	.word	0x42420000
 80012c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e9      	bne.n	80012ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a6 	beq.w	8001432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10d      	bne.n	8001312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b82      	ldr	r3, [pc, #520]	; (800151c <HAL_RCC_OscConfig+0x4c8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	4b7f      	ldr	r3, [pc, #508]	; (800151c <HAL_RCC_OscConfig+0x4c8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7e      	ldr	r2, [pc, #504]	; (800151c <HAL_RCC_OscConfig+0x4c8>)
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb2b 	bl	8000984 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff fb27 	bl	8000984 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e103      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	4b75      	ldr	r3, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x4c8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x312>
 8001358:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	e02d      	b.n	80013c2 <HAL_RCC_OscConfig+0x36e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x334>
 800136e:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a69      	ldr	r2, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	4b67      	ldr	r3, [pc, #412]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a66      	ldr	r2, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6213      	str	r3, [r2, #32]
 8001386:	e01c      	b.n	80013c2 <HAL_RCC_OscConfig+0x36e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x356>
 8001390:	4b61      	ldr	r3, [pc, #388]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a60      	ldr	r2, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a5d      	ldr	r2, [pc, #372]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0x36e>
 80013aa:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a5a      	ldr	r2, [pc, #360]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fadb 	bl	8000984 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fad7 	bl	8000984 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0b1      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ee      	beq.n	80013d2 <HAL_RCC_OscConfig+0x37e>
 80013f4:	e014      	b.n	8001420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fac5 	bl	8000984 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fac1 	bl	8000984 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e09b      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ee      	bne.n	80013fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a3b      	ldr	r2, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8087 	beq.w	800154a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d061      	beq.n	800150c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d146      	bne.n	80014de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_RCC_OscConfig+0x4cc>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fa95 	bl	8000984 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fa91 	bl	8000984 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e06d      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d108      	bne.n	8001498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f023 020f 	bic.w	r2, r3, #15
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4921      	ldr	r1, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a19      	ldr	r1, [r3, #32]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	430b      	orrs	r3, r1
 80014aa:	491b      	ldr	r1, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x4cc>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fa65 	bl	8000984 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fa61 	bl	8000984 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e03d      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x46a>
 80014dc:	e035      	b.n	800154a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_OscConfig+0x4cc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa4e 	bl	8000984 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fa4a 	bl	8000984 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e026      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x498>
 800150a:	e01e      	b.n	800154a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e019      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
 8001518:	40021000 	.word	0x40021000
 800151c:	40007000 	.word	0x40007000
 8001520:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	429a      	cmp	r2, r3
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0a0      	b.n	80016ae <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a4b      	ldr	r2, [pc, #300]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 800158a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800158e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4940      	ldr	r1, [pc, #256]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d040      	beq.n	8001648 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e067      	b.n	80016ae <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e05b      	b.n	80016ae <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e053      	b.n	80016ae <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4929      	ldr	r1, [pc, #164]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff f9b4 	bl	8000984 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f9b0 	bl	8000984 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e03b      	b.n	80016ae <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4915      	ldr	r1, [pc, #84]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490d      	ldr	r1, [pc, #52]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001686:	f000 f81f 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x160>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4909      	ldr	r1, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x164>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_RCC_ClockConfig+0x168>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_RCC_ClockConfig+0x16c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f886 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08005038 	.word	0x08005038
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_RCC_GetSysClockFreq+0x90>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x30>
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x36>
 80016f6:	e026      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_RCC_GetSysClockFreq+0x94>)
 80016fa:	613b      	str	r3, [r7, #16]
      break;
 80016fc:	e026      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <HAL_RCC_GetSysClockFreq+0x98>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_RCC_GetSysClockFreq+0x90>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4a11      	ldr	r2, [pc, #68]	; (8001764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0d      	ldr	r2, [pc, #52]	; (800175c <HAL_RCC_GetSysClockFreq+0x94>)
 8001728:	fb03 f202 	mul.w	r2, r3, r2
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e004      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_RCC_GetSysClockFreq+0xa0>)
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
      break;
 8001744:	e002      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_RCC_GetSysClockFreq+0x94>)
 8001748:	613b      	str	r3, [r7, #16]
      break;
 800174a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800174c:	693b      	ldr	r3, [r7, #16]
}
 800174e:	4618      	mov	r0, r3
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	007a1200 	.word	0x007a1200
 8001760:	08005050 	.word	0x08005050
 8001764:	08005060 	.word	0x08005060
 8001768:	003d0900 	.word	0x003d0900

0800176c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_RCC_GetHCLKFreq+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000000 	.word	0x20000000

08001780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001784:	f7ff fff2 	bl	800176c <HAL_RCC_GetHCLKFreq>
 8001788:	4602      	mov	r2, r0
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	4903      	ldr	r1, [pc, #12]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	08005048 	.word	0x08005048

080017a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017ac:	f7ff ffde 	bl	800176c <HAL_RCC_GetHCLKFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0adb      	lsrs	r3, r3, #11
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4903      	ldr	r1, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08005048 	.word	0x08005048

080017d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	220f      	movs	r2, #15
 80017de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_GetClockConfig+0x54>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_GetClockConfig+0x54>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_RCC_GetClockConfig+0x54>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_RCC_GetClockConfig+0x54>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
#endif
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e041      	b.n	80018fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f839 	bl	8001902 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f000 f9bc 	bl	8001c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e03f      	b.n	80019ac <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d00e      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0x62>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_TIM_Base_Start_IT+0xa8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0x62>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <HAL_TIM_Base_Start_IT+0xac>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0x62>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d111      	bne.n	800199a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d010      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001998:	e007      	b.n	80019aa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800
 80019c4:	40014000 	.word	0x40014000

080019c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d122      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d11b      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0202 	mvn.w	r2, #2
 80019f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8ed 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8e0 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8ef 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d122      	bne.n	8001a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d11b      	bne.n	8001a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0204 	mvn.w	r2, #4
 8001a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8c3 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001a64:	e005      	b.n	8001a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8b6 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f8c5 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0208 	mvn.w	r2, #8
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f899 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f88c 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f89b 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0210 	mvn.w	r2, #16
 8001af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2208      	movs	r2, #8
 8001af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f86f 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f862 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f871 	bl	8001bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10e      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0201 	mvn.w	r2, #1
 8001b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fd7c 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b80      	cmp	r3, #128	; 0x80
 8001b58:	d10e      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b80      	cmp	r3, #128	; 0x80
 8001b66:	d107      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8dd 	bl	8001d32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d10e      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d107      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f835 	bl	8001c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d107      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0220 	mvn.w	r2, #32
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8a8 	bl	8001d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a35      	ldr	r2, [pc, #212]	; (8001d08 <TIM_Base_SetConfig+0xe8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <TIM_Base_SetConfig+0x30>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d007      	beq.n	8001c50 <TIM_Base_SetConfig+0x30>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a32      	ldr	r2, [pc, #200]	; (8001d0c <TIM_Base_SetConfig+0xec>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <TIM_Base_SetConfig+0x30>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a31      	ldr	r2, [pc, #196]	; (8001d10 <TIM_Base_SetConfig+0xf0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <TIM_Base_SetConfig+0xe8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d017      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d013      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <TIM_Base_SetConfig+0xec>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00f      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <TIM_Base_SetConfig+0xf0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00b      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <TIM_Base_SetConfig+0xf4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	; (8001d18 <TIM_Base_SetConfig+0xf8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d003      	beq.n	8001c9a <TIM_Base_SetConfig+0x7a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <TIM_Base_SetConfig+0xfc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d108      	bne.n	8001cac <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <TIM_Base_SetConfig+0xe8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00b      	beq.n	8001cf0 <TIM_Base_SetConfig+0xd0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <TIM_Base_SetConfig+0xf4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d007      	beq.n	8001cf0 <TIM_Base_SetConfig+0xd0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <TIM_Base_SetConfig+0xf8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d003      	beq.n	8001cf0 <TIM_Base_SetConfig+0xd0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <TIM_Base_SetConfig+0xfc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	615a      	str	r2, [r3, #20]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40014000 	.word	0x40014000
 8001d18:	40014400 	.word	0x40014400
 8001d1c:	40014800 	.word	0x40014800

08001d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e042      	b.n	8001ddc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fcd2 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fdc5 	bl	8002918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d16d      	bne.n	8001ee0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_UART_Transmit+0x2c>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e066      	b.n	8001ee2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2221      	movs	r2, #33	; 0x21
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e22:	f7fe fdaf 	bl	8000984 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3c:	d108      	bne.n	8001e50 <HAL_UART_Transmit+0x6c>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	e003      	b.n	8001e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e58:	e02a      	b.n	8001eb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	2180      	movs	r1, #128	; 0x80
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fb14 	bl	8002492 <UART_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e036      	b.n	8001ee2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e007      	b.n	8001ea2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1cf      	bne.n	8001e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2140      	movs	r1, #64	; 0x40
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fae4 	bl	8002492 <UART_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e006      	b.n	8001ee2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e000      	b.n	8001ee2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d112      	bne.n	8001f2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_UART_Receive_IT+0x26>
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e00b      	b.n	8001f2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fb24 	bl	800256e <UART_Start_Receive_IT>
 8001f26:	4603      	mov	r3, r0
 8001f28:	e000      	b.n	8001f2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
  }
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0ba      	sub	sp, #232	; 0xe8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_UART_IRQHandler+0x66>
 8001f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fc01 	bl	800279a <UART_Receive_IT>
      return;
 8001f98:	e25b      	b.n	8002452 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80de 	beq.w	8002160 <HAL_UART_IRQHandler+0x22c>
 8001fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80d1 	beq.w	8002160 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xae>
 8001fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_UART_IRQHandler+0xd2>
 8001fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_UART_IRQHandler+0xf6>
 8002012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800202a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_UART_IRQHandler+0x126>
 8002036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f043 0208 	orr.w	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 81f2 	beq.w	8002448 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_UART_IRQHandler+0x14e>
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fb8c 	bl	800279a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_UART_IRQHandler+0x17a>
 80020a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04f      	beq.n	800214e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa96 	bl	80025e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d041      	beq.n	8002146 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3314      	adds	r3, #20
 80020c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020d0:	e853 3f00 	ldrex	r3, [r3]
 80020d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020fe:	e841 2300 	strex	r3, r2, [r1]
 8002102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1d9      	bne.n	80020c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d013      	beq.n	800213e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <HAL_UART_IRQHandler+0x3e0>)
 800211c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fd52 	bl	8000bcc <HAL_DMA_Abort_IT>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002138:	4610      	mov	r0, r2
 800213a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213c:	e00e      	b.n	800215c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f993 	bl	800246a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002144:	e00a      	b.n	800215c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f98f 	bl	800246a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214c:	e006      	b.n	800215c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f98b 	bl	800246a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800215a:	e175      	b.n	8002448 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800215c:	bf00      	nop
    return;
 800215e:	e173      	b.n	8002448 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 814f 	bne.w	8002408 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800216a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8148 	beq.w	8002408 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8141 	beq.w	8002408 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80b6 	beq.w	8002318 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8145 	beq.w	800244c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ca:	429a      	cmp	r2, r3
 80021cc:	f080 813e 	bcs.w	800244c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b20      	cmp	r3, #32
 80021e0:	f000 8088 	beq.w	80022f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021f2:	e853 3f00 	ldrex	r3, [r3]
 80021f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002210:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002218:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800221c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002220:	e841 2300 	strex	r3, r2, [r1]
 8002224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1d9      	bne.n	80021e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3314      	adds	r3, #20
 8002236:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223a:	e853 3f00 	ldrex	r3, [r3]
 800223e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3314      	adds	r3, #20
 8002250:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002254:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002258:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800225c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e1      	bne.n	8002230 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002276:	e853 3f00 	ldrex	r3, [r3]
 800227a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800227e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3314      	adds	r3, #20
 800228c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002290:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002292:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002296:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800229e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e3      	bne.n	800226c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	e853 3f00 	ldrex	r3, [r3]
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c4:	f023 0310 	bic.w	r3, r3, #16
 80022c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80022d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e3      	bne.n	80022b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc31 	bl	8000b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002302:	b29b      	uxth	r3, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8b6 	bl	800247c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002310:	e09c      	b.n	800244c <HAL_UART_IRQHandler+0x518>
 8002312:	bf00      	nop
 8002314:	080026a5 	.word	0x080026a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002320:	b29b      	uxth	r3, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 808e 	beq.w	8002450 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8089 	beq.w	8002450 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	330c      	adds	r3, #12
 800235e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002362:	647a      	str	r2, [r7, #68]	; 0x44
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e3      	bne.n	800233e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	623b      	str	r3, [r7, #32]
   return(result);
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3314      	adds	r3, #20
 8002396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800239a:	633a      	str	r2, [r7, #48]	; 0x30
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a2:	e841 2300 	strex	r3, r2, [r1]
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1e3      	bne.n	8002376 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	e853 3f00 	ldrex	r3, [r3]
 80023ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0310 	bic.w	r3, r3, #16
 80023d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023e0:	61fa      	str	r2, [r7, #28]
 80023e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e4:	69b9      	ldr	r1, [r7, #24]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	e841 2300 	strex	r3, r2, [r1]
 80023ec:	617b      	str	r3, [r7, #20]
   return(result);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e3      	bne.n	80023bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f83b 	bl	800247c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002406:	e023      	b.n	8002450 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_UART_IRQHandler+0x4f4>
 8002414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f953 	bl	80026cc <UART_Transmit_IT>
    return;
 8002426:	e014      	b.n	8002452 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <HAL_UART_IRQHandler+0x51e>
 8002434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f992 	bl	800276a <UART_EndTransmit_IT>
    return;
 8002446:	e004      	b.n	8002452 <HAL_UART_IRQHandler+0x51e>
    return;
 8002448:	bf00      	nop
 800244a:	e002      	b.n	8002452 <HAL_UART_IRQHandler+0x51e>
      return;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_UART_IRQHandler+0x51e>
      return;
 8002450:	bf00      	nop
  }
}
 8002452:	37e8      	adds	r7, #232	; 0xe8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b090      	sub	sp, #64	; 0x40
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a2:	e050      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d04c      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80024b2:	f7fe fa67 	bl	8000984 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024be:	429a      	cmp	r2, r3
 80024c0:	d241      	bcs.n	8002546 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024e2:	637a      	str	r2, [r7, #52]	; 0x34
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e5      	bne.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	613b      	str	r3, [r7, #16]
   return(result);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3314      	adds	r3, #20
 8002514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002516:	623a      	str	r2, [r7, #32]
 8002518:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	69f9      	ldr	r1, [r7, #28]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	61bb      	str	r3, [r7, #24]
   return(result);
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e5      	bne.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e00f      	b.n	8002566 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4013      	ands	r3, r2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	429a      	cmp	r2, r3
 8002562:	d09f      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3740      	adds	r7, #64	; 0x40
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2222      	movs	r2, #34	; 0x22
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b095      	sub	sp, #84	; 0x54
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	e853 3f00 	ldrex	r3, [r3]
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002608:	643a      	str	r2, [r7, #64]	; 0x40
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800260e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e5      	bne.n	80025e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	61fb      	str	r3, [r7, #28]
   return(result);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3314      	adds	r3, #20
 800263a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800263c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e5      	bne.n	800261c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	d119      	bne.n	800268c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	60bb      	str	r3, [r7, #8]
   return(result);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f023 0310 	bic.w	r3, r3, #16
 800266e:	647b      	str	r3, [r7, #68]	; 0x44
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002678:	61ba      	str	r2, [r7, #24]
 800267a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	613b      	str	r3, [r7, #16]
   return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
}
 800269a:	bf00      	nop
 800269c:	3754      	adds	r7, #84	; 0x54
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fed3 	bl	800246a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b21      	cmp	r3, #33	; 0x21
 80026de:	d13e      	bne.n	800275e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d114      	bne.n	8002714 <UART_Transmit_IT+0x48>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d110      	bne.n	8002714 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002706:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	1c9a      	adds	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	621a      	str	r2, [r3, #32]
 8002712:	e008      	b.n	8002726 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	1c59      	adds	r1, r3, #1
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6211      	str	r1, [r2, #32]
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4619      	mov	r1, r3
 8002734:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002758:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fe64 	bl	8002458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b08c      	sub	sp, #48	; 0x30
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b22      	cmp	r3, #34	; 0x22
 80027ac:	f040 80ae 	bne.w	800290c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d117      	bne.n	80027ea <UART_Receive_IT+0x50>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d113      	bne.n	80027ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	b29a      	uxth	r2, r3
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
 80027e8:	e026      	b.n	8002838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d007      	beq.n	800280e <UART_Receive_IT+0x74>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <UART_Receive_IT+0x82>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e008      	b.n	800282e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002828:	b2da      	uxtb	r2, r3
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4619      	mov	r1, r3
 8002846:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002848:	2b00      	cmp	r3, #0
 800284a:	d15d      	bne.n	8002908 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0220 	bic.w	r2, r2, #32
 800285a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	2b01      	cmp	r3, #1
 8002890:	d135      	bne.n	80028fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	613b      	str	r3, [r7, #16]
   return(result);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	623a      	str	r2, [r7, #32]
 80028ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	69f9      	ldr	r1, [r7, #28]
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d10a      	bne.n	80028f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fdc0 	bl	800247c <HAL_UARTEx_RxEventCallback>
 80028fc:	e002      	b.n	8002904 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fd feb2 	bl	8000668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e002      	b.n	800290e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3730      	adds	r7, #48	; 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	4313      	orrs	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002958:	f023 030c 	bic.w	r3, r3, #12
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	430b      	orrs	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <UART_SetConfig+0x1c0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d103      	bne.n	800298e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002986:	f7fe ff0f 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	e002      	b.n	8002994 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800298e:	f7fe fef7 	bl	8001780 <HAL_RCC_GetPCLK1Freq>
 8002992:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d14c      	bne.n	8002a38 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	4a49      	ldr	r2, [pc, #292]	; (8002adc <UART_SetConfig+0x1c4>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	0119      	lsls	r1, r3, #4
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009a      	lsls	r2, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d4:	4b41      	ldr	r3, [pc, #260]	; (8002adc <UART_SetConfig+0x1c4>)
 80029d6:	fba3 0302 	umull	r0, r3, r3, r2
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2064      	movs	r0, #100	; 0x64
 80029de:	fb00 f303 	mul.w	r3, r0, r3
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	3332      	adds	r3, #50	; 0x32
 80029e8:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <UART_SetConfig+0x1c4>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029f6:	4419      	add	r1, r3
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	441a      	add	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <UART_SetConfig+0x1c4>)
 8002a10:	fba3 0302 	umull	r0, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2064      	movs	r0, #100	; 0x64
 8002a18:	fb00 f303 	mul.w	r3, r0, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a2e      	ldr	r2, [pc, #184]	; (8002adc <UART_SetConfig+0x1c4>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	440a      	add	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8002a36:	e04a      	b.n	8002ace <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	4a23      	ldr	r2, [pc, #140]	; (8002adc <UART_SetConfig+0x1c4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	0119      	lsls	r1, r3, #4
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009a      	lsls	r2, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <UART_SetConfig+0x1c4>)
 8002a70:	fba3 0302 	umull	r0, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	2064      	movs	r0, #100	; 0x64
 8002a78:	fb00 f303 	mul.w	r3, r0, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	3332      	adds	r3, #50	; 0x32
 8002a82:	4a16      	ldr	r2, [pc, #88]	; (8002adc <UART_SetConfig+0x1c4>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8e:	4419      	add	r1, r3
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <UART_SetConfig+0x1c4>)
 8002aa8:	fba3 0302 	umull	r0, r3, r3, r2
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	2064      	movs	r0, #100	; 0x64
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	3332      	adds	r3, #50	; 0x32
 8002aba:	4a08      	ldr	r2, [pc, #32]	; (8002adc <UART_SetConfig+0x1c4>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	440a      	add	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40013800 	.word	0x40013800
 8002adc:	51eb851f 	.word	0x51eb851f

08002ae0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af2:	2b84      	cmp	r3, #132	; 0x84
 8002af4:	d005      	beq.n	8002b02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	3303      	adds	r3, #3
 8002b00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b14:	f3ef 8305 	mrs	r3, IPSR
 8002b18:	607b      	str	r3, [r7, #4]
  return(result);
 8002b1a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b34:	f001 f8f0 	bl	8003d18 <vTaskStartScheduler>
  
  return osOK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b40:	b089      	sub	sp, #36	; 0x24
 8002b42:	af04      	add	r7, sp, #16
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <osThreadCreate+0x54>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01c      	beq.n	8002b92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685c      	ldr	r4, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691e      	ldr	r6, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ffb8 	bl	8002ae0 <makeFreeRtosPriority>
 8002b70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	9100      	str	r1, [sp, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4632      	mov	r2, r6
 8002b84:	4629      	mov	r1, r5
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 ff08 	bl	800399c <xTaskCreateStatic>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e01c      	b.n	8002bcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685c      	ldr	r4, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff9a 	bl	8002ae0 <makeFreeRtosPriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	9200      	str	r2, [sp, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4629      	mov	r1, r5
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f000 ff49 	bl	8003a54 <xTaskCreate>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <osDelay+0x16>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	e000      	b.n	8002bee <osDelay+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f85e 	bl	8003cb0 <vTaskDelay>
  
  return osOK;
 8002bf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002bfe:	b590      	push	{r4, r7, lr}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d011      	beq.n	8002c34 <osMessageCreate+0x36>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2400      	movs	r4, #0
 8002c2a:	9400      	str	r4, [sp, #0]
 8002c2c:	f000 f9dc 	bl	8002fe8 <xQueueGenericCreateStatic>
 8002c30:	4603      	mov	r3, r0
 8002c32:	e008      	b.n	8002c46 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f000 fa49 	bl	80030d6 <xQueueGenericCreate>
 8002c44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
	...

08002c50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <osMessagePut+0x1e>
    ticks = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002c6e:	f7ff ff4e 	bl	8002b0e <inHandlerMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d018      	beq.n	8002caa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002c78:	f107 0210 	add.w	r2, r7, #16
 8002c7c:	f107 0108 	add.w	r1, r7, #8
 8002c80:	2300      	movs	r3, #0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fb82 	bl	800338c <xQueueGenericSendFromISR>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <osMessagePut+0x42>
      return osErrorOS;
 8002c8e:	23ff      	movs	r3, #255	; 0xff
 8002c90:	e018      	b.n	8002cc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d014      	beq.n	8002cc2 <osMessagePut+0x72>
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <osMessagePut+0x7c>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e00b      	b.n	8002cc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002caa:	f107 0108 	add.w	r1, r7, #8
 8002cae:	2300      	movs	r3, #0
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa6c 	bl	8003190 <xQueueGenericSend>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <osMessagePut+0x72>
      return osErrorOS;
 8002cbe:	23ff      	movs	r3, #255	; 0xff
 8002cc0:	e000      	b.n	8002cc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b08b      	sub	sp, #44	; 0x2c
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	617b      	str	r3, [r7, #20]
    return event;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cfe:	e054      	b.n	8002daa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d103      	bne.n	8002d18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	e009      	b.n	8002d2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <osMessageGet+0x5c>
      ticks = 1;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002d2c:	f7ff feef 	bl	8002b0e <inHandlerMode>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01c      	beq.n	8002d70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002d36:	f107 0220 	add.w	r2, r7, #32
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	68b8      	ldr	r0, [r7, #8]
 8002d44:	f000 fc9a 	bl	800367c <xQueueReceiveFromISR>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002d4e:	2310      	movs	r3, #16
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e001      	b.n	8002d58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01d      	beq.n	8002d9a <osMessageGet+0xca>
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <osMessageGet+0xe4>)
 8002d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	e014      	b.n	8002d9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	3304      	adds	r3, #4
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	68b8      	ldr	r0, [r7, #8]
 8002d7c:	f000 fb9e 	bl	80034bc <xQueueReceive>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002d86:	2310      	movs	r3, #16
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e006      	b.n	8002d9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <osMessageGet+0xc6>
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <osMessageGet+0xc8>
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	372c      	adds	r7, #44	; 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000ed04 	.word	0xe000ed04

08002db8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 0208 	add.w	r2, r3, #8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f103 0208 	add.w	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f103 0208 	add.w	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d103      	bne.n	8002e74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e00c      	b.n	8002e8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3308      	adds	r3, #8
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e002      	b.n	8002e82 <vListInsert+0x2e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d2f6      	bcs.n	8002e7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6892      	ldr	r2, [r2, #8]
 8002eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6852      	ldr	r2, [r2, #4]
 8002ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d103      	bne.n	8002ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f42:	f001 fceb 	bl	800491c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	441a      	add	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	3b01      	subs	r3, #1
 8002f74:	68f9      	ldr	r1, [r7, #12]
 8002f76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	22ff      	movs	r2, #255	; 0xff
 8002f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	22ff      	movs	r2, #255	; 0xff
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d114      	bne.n	8002fc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01a      	beq.n	8002fd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 f8fd 	bl	80041a4 <xTaskRemoveFromEventList>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <xQueueGenericReset+0xcc>)
 8002fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	e009      	b.n	8002fd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fef6 	bl	8002db8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fef1 	bl	8002db8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fd6:	f001 fcd1 	bl	800497c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800300e:	bf00      	nop
 8003010:	e7fe      	b.n	8003010 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <xQueueGenericCreateStatic+0x52>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <xQueueGenericCreateStatic+0x56>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericCreateStatic+0x58>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	623b      	str	r3, [r7, #32]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <xQueueGenericCreateStatic+0x7e>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <xQueueGenericCreateStatic+0x82>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueGenericCreateStatic+0x84>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61fb      	str	r3, [r7, #28]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003086:	2348      	movs	r3, #72	; 0x48
 8003088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b48      	cmp	r3, #72	; 0x48
 800308e:	d00a      	beq.n	80030a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61bb      	str	r3, [r7, #24]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f843 	bl	8003152 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3730      	adds	r7, #48	; 0x30
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b08a      	sub	sp, #40	; 0x28
 80030da:	af02      	add	r7, sp, #8
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <xQueueGenericCreate+0x2a>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	613b      	str	r3, [r7, #16]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e004      	b.n	8003116 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3348      	adds	r3, #72	; 0x48
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fcfe 	bl	8004b1c <pvPortMalloc>
 8003120:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00f      	beq.n	8003148 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3348      	adds	r3, #72	; 0x48
 800312c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f805 	bl	8003152 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003148:	69bb      	ldr	r3, [r7, #24]
	}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e002      	b.n	8003174 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003180:	2101      	movs	r1, #1
 8003182:	69b8      	ldr	r0, [r7, #24]
 8003184:	f7ff fec8 	bl	8002f18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xQueueGenericSend+0x32>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <xQueueGenericSend+0x40>
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <xQueueGenericSend+0x44>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <xQueueGenericSend+0x46>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <xQueueGenericSend+0x60>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d103      	bne.n	80031fe <xQueueGenericSend+0x6e>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <xQueueGenericSend+0x72>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueGenericSend+0x74>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericSend+0x8e>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	623b      	str	r3, [r7, #32]
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321e:	f001 f981 	bl	8004524 <xTaskGetSchedulerState>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <xQueueGenericSend+0x9e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueGenericSend+0xa2>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueGenericSend+0xa4>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <xQueueGenericSend+0xbe>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	61fb      	str	r3, [r7, #28]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800324e:	f001 fb65 	bl	800491c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <xQueueGenericSend+0xd4>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d129      	bne.n	80032b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800326a:	f000 fa87 	bl	800377c <prvCopyDataToQueue>
 800326e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	3324      	adds	r3, #36	; 0x24
 800327c:	4618      	mov	r0, r3
 800327e:	f000 ff91 	bl	80041a4 <xTaskRemoveFromEventList>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <xQueueGenericSend+0x1f8>)
 800328a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	e00a      	b.n	80032b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032a0:	4b39      	ldr	r3, [pc, #228]	; (8003388 <xQueueGenericSend+0x1f8>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032b0:	f001 fb64 	bl	800497c <vPortExitCritical>
				return pdPASS;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e063      	b.n	8003380 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032be:	f001 fb5d 	bl	800497c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e05c      	b.n	8003380 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 ffc9 	bl	8004268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032da:	f001 fb4f 	bl	800497c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032de:	f000 fd7b 	bl	8003dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e2:	f001 fb1b 	bl	800491c <vPortEnterCritical>
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d103      	bne.n	80032fc <xQueueGenericSend+0x16c>
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <xQueueGenericSend+0x182>
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003312:	f001 fb33 	bl	800497c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003316:	1d3a      	adds	r2, r7, #4
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ffb8 	bl	8004294 <xTaskCheckForTimeOut>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d124      	bne.n	8003374 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800332a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332c:	f000 fb1e 	bl	800396c <prvIsQueueFull>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	3310      	adds	r3, #16
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ff0c 	bl	800415c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003346:	f000 faa9 	bl	800389c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800334a:	f000 fd53 	bl	8003df4 <xTaskResumeAll>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af7c 	bne.w	800324e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <xQueueGenericSend+0x1f8>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	e772      	b.n	800324e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800336a:	f000 fa97 	bl	800389c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800336e:	f000 fd41 	bl	8003df4 <xTaskResumeAll>
 8003372:	e76c      	b.n	800324e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003376:	f000 fa91 	bl	800389c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337a:	f000 fd3b 	bl	8003df4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800337e:	2300      	movs	r3, #0
		}
	}
}
 8003380:	4618      	mov	r0, r3
 8003382:	3738      	adds	r7, #56	; 0x38
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <xQueueGenericSendFromISR+0x3c>
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <xQueueGenericSendFromISR+0x40>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <xQueueGenericSendFromISR+0x42>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	623b      	str	r3, [r7, #32]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <xQueueGenericSendFromISR+0x6a>
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <xQueueGenericSendFromISR+0x6e>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <xQueueGenericSendFromISR+0x70>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	61fb      	str	r3, [r7, #28]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003416:	f001 fb43 	bl	8004aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800341a:	f3ef 8211 	mrs	r2, BASEPRI
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	61ba      	str	r2, [r7, #24]
 8003430:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003432:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <xQueueGenericSendFromISR+0xbc>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d12c      	bne.n	80034a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003458:	f000 f990 	bl	800377c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800345c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d112      	bne.n	800348c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	3324      	adds	r3, #36	; 0x24
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe96 	bl	80041a4 <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e007      	b.n	800349c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800348c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003490:	3301      	adds	r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	b25a      	sxtb	r2, r3
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800349c:	2301      	movs	r3, #1
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80034a0:	e001      	b.n	80034a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3738      	adds	r7, #56	; 0x38
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <xQueueReceive+0x30>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	623b      	str	r3, [r7, #32]
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d103      	bne.n	80034fa <xQueueReceive+0x3e>
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueReceive+0x42>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueReceive+0x44>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueReceive+0x5e>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61fb      	str	r3, [r7, #28]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351a:	f001 f803 	bl	8004524 <xTaskGetSchedulerState>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <xQueueReceive+0x6e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <xQueueReceive+0x72>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <xQueueReceive+0x74>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xQueueReceive+0x8e>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	61bb      	str	r3, [r7, #24]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800354a:	f001 f9e7 	bl	800491c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01f      	beq.n	800359a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800355e:	f000 f977 	bl	8003850 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00f      	beq.n	8003592 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	3310      	adds	r3, #16
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fe14 	bl	80041a4 <xTaskRemoveFromEventList>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <xQueueReceive+0x1bc>)
 8003584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003592:	f001 f9f3 	bl	800497c <vPortExitCritical>
				return pdPASS;
 8003596:	2301      	movs	r3, #1
 8003598:	e069      	b.n	800366e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a0:	f001 f9ec 	bl	800497c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e062      	b.n	800366e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ae:	f107 0310 	add.w	r3, r7, #16
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe58 	bl	8004268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035bc:	f001 f9de 	bl	800497c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c0:	f000 fc0a 	bl	8003dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c4:	f001 f9aa 	bl	800491c <vPortEnterCritical>
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d103      	bne.n	80035de <xQueueReceive+0x122>
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d103      	bne.n	80035f4 <xQueueReceive+0x138>
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f4:	f001 f9c2 	bl	800497c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f8:	1d3a      	adds	r2, r7, #4
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe47 	bl	8004294 <xTaskCheckForTimeOut>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d123      	bne.n	8003654 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800360c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800360e:	f000 f997 	bl	8003940 <prvIsQueueEmpty>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fd9b 	bl	800415c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003628:	f000 f938 	bl	800389c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800362c:	f000 fbe2 	bl	8003df4 <xTaskResumeAll>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d189      	bne.n	800354a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <xQueueReceive+0x1bc>)
 8003638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	e780      	b.n	800354a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364a:	f000 f927 	bl	800389c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800364e:	f000 fbd1 	bl	8003df4 <xTaskResumeAll>
 8003652:	e77a      	b.n	800354a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003656:	f000 f921 	bl	800389c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365a:	f000 fbcb 	bl	8003df4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800365e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003660:	f000 f96e 	bl	8003940 <prvIsQueueEmpty>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f43f af6f 	beq.w	800354a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800366c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800366e:	4618      	mov	r0, r3
 8003670:	3730      	adds	r7, #48	; 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	; 0x38
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	623b      	str	r3, [r7, #32]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <xQueueReceiveFromISR+0x3a>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <xQueueReceiveFromISR+0x3e>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueReceiveFromISR+0x40>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	61fb      	str	r3, [r7, #28]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036d6:	f001 f9e3 	bl	8004aa0 <vPortValidateInterruptPriority>
	__asm volatile
 80036da:	f3ef 8211 	mrs	r2, BASEPRI
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	61ba      	str	r2, [r7, #24]
 80036f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02f      	beq.n	8003762 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003710:	f000 f89e 	bl	8003850 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	1e5a      	subs	r2, r3, #1
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800371c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d112      	bne.n	800374c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	3310      	adds	r3, #16
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fd36 	bl	80041a4 <xTaskRemoveFromEventList>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e007      	b.n	800375c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800374c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003750:	3301      	adds	r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	b25a      	sxtb	r2, r3
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	e001      	b.n	8003766 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f383 8811 	msr	BASEPRI, r3
}
 8003770:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003774:	4618      	mov	r0, r3
 8003776:	3738      	adds	r7, #56	; 0x38
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d14d      	bne.n	800383e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 feda 	bl	8004560 <xTaskPriorityDisinherit>
 80037ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	e043      	b.n	800383e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d119      	bne.n	80037f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6898      	ldr	r0, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	461a      	mov	r2, r3
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	f001 fbc4 	bl	8004f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	441a      	add	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d32b      	bcc.n	800383e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	e026      	b.n	800383e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68d8      	ldr	r0, [r3, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	461a      	mov	r2, r3
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	f001 fbaa 	bl	8004f54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	425b      	negs	r3, r3
 800380a:	441a      	add	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d207      	bcs.n	800382c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	425b      	negs	r3, r3
 8003826:	441a      	add	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d105      	bne.n	800383e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	3b01      	subs	r3, #1
 800383c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003846:	697b      	ldr	r3, [r7, #20]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d018      	beq.n	8003894 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d303      	bcc.n	8003884 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	461a      	mov	r2, r3
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	f001 fb60 	bl	8004f54 <memcpy>
	}
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038a4:	f001 f83a 	bl	800491c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b0:	e011      	b.n	80038d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d012      	beq.n	80038e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3324      	adds	r3, #36	; 0x24
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fc70 	bl	80041a4 <xTaskRemoveFromEventList>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038ca:	f000 fd45 	bl	8004358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	dce9      	bgt.n	80038b2 <prvUnlockQueue+0x16>
 80038de:	e000      	b.n	80038e2 <prvUnlockQueue+0x46>
					break;
 80038e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	22ff      	movs	r2, #255	; 0xff
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038ea:	f001 f847 	bl	800497c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038ee:	f001 f815 	bl	800491c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038fa:	e011      	b.n	8003920 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3310      	adds	r3, #16
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fc4b 	bl	80041a4 <xTaskRemoveFromEventList>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003914:	f000 fd20 	bl	8004358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003918:	7bbb      	ldrb	r3, [r7, #14]
 800391a:	3b01      	subs	r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003924:	2b00      	cmp	r3, #0
 8003926:	dce9      	bgt.n	80038fc <prvUnlockQueue+0x60>
 8003928:	e000      	b.n	800392c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800392a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	22ff      	movs	r2, #255	; 0xff
 8003930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003934:	f001 f822 	bl	800497c <vPortExitCritical>
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003948:	f000 ffe8 	bl	800491c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e001      	b.n	800395e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800395e:	f001 f80d 	bl	800497c <vPortExitCritical>

	return xReturn;
 8003962:	68fb      	ldr	r3, [r7, #12]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003974:	f000 ffd2 	bl	800491c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	429a      	cmp	r2, r3
 8003982:	d102      	bne.n	800398a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003984:	2301      	movs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e001      	b.n	800398e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800398e:	f000 fff5 	bl	800497c <vPortExitCritical>

	return xReturn;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af04      	add	r7, sp, #16
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	623b      	str	r3, [r7, #32]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039e2:	2354      	movs	r3, #84	; 0x54
 80039e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b54      	cmp	r3, #84	; 0x54
 80039ea:	d00a      	beq.n	8003a02 <xTaskCreateStatic+0x66>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61bb      	str	r3, [r7, #24]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01e      	beq.n	8003a46 <xTaskCreateStatic+0xaa>
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01b      	beq.n	8003a46 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a20:	2300      	movs	r3, #0
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f850 	bl	8003ade <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a40:	f000 f8cc 	bl	8003bdc <prvAddNewTaskToReadyList>
 8003a44:	e001      	b.n	8003a4a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a4a:	697b      	ldr	r3, [r7, #20]
	}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 f857 	bl	8004b1c <pvPortMalloc>
 8003a6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a76:	2054      	movs	r0, #84	; 0x54
 8003a78:	f001 f850 	bl	8004b1c <pvPortMalloc>
 8003a7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
 8003a8a:	e005      	b.n	8003a98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a8c:	6978      	ldr	r0, [r7, #20]
 8003a8e:	f001 f909 	bl	8004ca4 <vPortFree>
 8003a92:	e001      	b.n	8003a98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9303      	str	r3, [sp, #12]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f80e 	bl	8003ade <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac2:	69f8      	ldr	r0, [r7, #28]
 8003ac4:	f000 f88a 	bl	8003bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e002      	b.n	8003ad4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
	}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003af6:	3b01      	subs	r3, #1
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f023 0307 	bic.w	r3, r3, #7
 8003b04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	617b      	str	r3, [r7, #20]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e012      	b.n	8003b52 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	7819      	ldrb	r1, [r3, #0]
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3334      	adds	r3, #52	; 0x34
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d9e9      	bls.n	8003b2c <prvInitialiseNewTask+0x4e>
 8003b58:	e000      	b.n	8003b5c <prvInitialiseNewTask+0x7e>
		{
			break;
 8003b5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d901      	bls.n	8003b6e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	3304      	adds	r3, #4
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f936 	bl	8002df6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f931 	bl	8002df6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	f1c3 0207 	rsb	r2, r3, #7
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2200      	movs	r2, #0
 8003bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	69b8      	ldr	r0, [r7, #24]
 8003bbe:	f000 fdbb 	bl	8004738 <pxPortInitialiseStack>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f000 fe9a 	bl	800491c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d110      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c08:	f000 fbca 	bl	80043a0 <prvInitialiseTaskLists>
 8003c0c:	e00d      	b.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <prvAddNewTaskToReadyList+0xc0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d802      	bhi.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003c32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <prvAddNewTaskToReadyList+0xcc>)
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7ff f8d6 	bl	8002e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c62:	f000 fe8b 	bl	800497c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <prvAddNewTaskToReadyList+0xc0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00e      	beq.n	8003c8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvAddNewTaskToReadyList+0xd0>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000430 	.word	0x20000430
 8003c98:	20000330 	.word	0x20000330
 8003c9c:	2000043c 	.word	0x2000043c
 8003ca0:	2000044c 	.word	0x2000044c
 8003ca4:	20000438 	.word	0x20000438
 8003ca8:	20000334 	.word	0x20000334
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <vTaskDelay+0x60>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <vTaskDelay+0x30>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60bb      	str	r3, [r7, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ce0:	f000 f87a 	bl	8003dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fcc0 	bl	800466c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cec:	f000 f882 	bl	8003df4 <xTaskResumeAll>
 8003cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <vTaskDelay+0x64>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000458 	.word	0x20000458
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d26:	463a      	mov	r2, r7
 8003d28:	1d39      	adds	r1, r7, #4
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fa6e 	bl	8000210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	460a      	mov	r2, r1
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <vTaskStartScheduler+0xa8>)
 8003d48:	481e      	ldr	r0, [pc, #120]	; (8003dc4 <vTaskStartScheduler+0xac>)
 8003d4a:	f7ff fe27 	bl	800399c <xTaskCreateStatic>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <vTaskStartScheduler+0xb0>)
 8003d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <vTaskStartScheduler+0xb0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e001      	b.n	8003d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d116      	bne.n	8003d9a <vTaskStartScheduler+0x82>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	613b      	str	r3, [r7, #16]
}
 8003d7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <vTaskStartScheduler+0xb4>)
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <vTaskStartScheduler+0xb8>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <vTaskStartScheduler+0xbc>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d94:	f000 fd50 	bl	8004838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d98:	e00e      	b.n	8003db8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d10a      	bne.n	8003db8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60fb      	str	r3, [r7, #12]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vTaskStartScheduler+0x9e>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08005030 	.word	0x08005030
 8003dc4:	08004371 	.word	0x08004371
 8003dc8:	20000454 	.word	0x20000454
 8003dcc:	20000450 	.word	0x20000450
 8003dd0:	2000043c 	.word	0x2000043c
 8003dd4:	20000434 	.word	0x20000434

08003dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000458 	.word	0x20000458

08003df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e20:	f000 fd7c 	bl	800491c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a37      	ldr	r2, [pc, #220]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d161      	bne.n	8003efa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <xTaskResumeAll+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d05d      	beq.n	8003efa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e3e:	e02e      	b.n	8003e9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff f839 	bl	8002ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff f834 	bl	8002ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <xTaskResumeAll+0x124>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe ffc2 	bl	8002e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <xTaskResumeAll+0x128>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cc      	bne.n	8003e40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eac:	f000 fb16 	bl	80044dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ebc:	f000 f836 	bl	8003f2c <xTaskIncrementTick>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <xTaskResumeAll+0x134>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003efa:	f000 fd3f 	bl	800497c <vPortExitCritical>

	return xAlreadyYielded;
 8003efe:	68bb      	ldr	r3, [r7, #8]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000458 	.word	0x20000458
 8003f0c:	20000430 	.word	0x20000430
 8003f10:	200003f0 	.word	0x200003f0
 8003f14:	20000438 	.word	0x20000438
 8003f18:	20000334 	.word	0x20000334
 8003f1c:	20000330 	.word	0x20000330
 8003f20:	20000444 	.word	0x20000444
 8003f24:	20000440 	.word	0x20000440
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <xTaskIncrementTick+0x150>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 808d 	bne.w	800405a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f48:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d120      	bne.n	8003f96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	603b      	str	r3, [r7, #0]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xTaskIncrementTick+0x46>
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b43      	ldr	r3, [pc, #268]	; (8004088 <xTaskIncrementTick+0x15c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a41      	ldr	r2, [pc, #260]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4a41      	ldr	r2, [pc, #260]	; (8004088 <xTaskIncrementTick+0x15c>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b40      	ldr	r3, [pc, #256]	; (800408c <xTaskIncrementTick+0x160>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <xTaskIncrementTick+0x160>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	f000 faa3 	bl	80044dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <xTaskIncrementTick+0x164>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d34d      	bcc.n	800403c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xTaskIncrementTick+0x82>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xTaskIncrementTick+0x84>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <xTaskIncrementTick+0x164>)
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	601a      	str	r2, [r3, #0]
					break;
 8003fbc:	e03e      	b.n	800403c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fbe:	4b31      	ldr	r3, [pc, #196]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fd6:	4a2e      	ldr	r2, [pc, #184]	; (8004090 <xTaskIncrementTick+0x164>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6013      	str	r3, [r2, #0]
						break;
 8003fdc:	e02e      	b.n	800403c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe ff6e 	bl	8002ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3318      	adds	r3, #24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe ff65 	bl	8002ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <xTaskIncrementTick+0x168>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <xTaskIncrementTick+0x168>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <xTaskIncrementTick+0x16c>)
 800401a:	441a      	add	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fef3 	bl	8002e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <xTaskIncrementTick+0x170>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d3b4      	bcc.n	8003fa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800403a:	e7b1      	b.n	8003fa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <xTaskIncrementTick+0x170>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4915      	ldr	r1, [pc, #84]	; (8004098 <xTaskIncrementTick+0x16c>)
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d907      	bls.n	8004064 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e004      	b.n	8004064 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <xTaskIncrementTick+0x174>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <xTaskIncrementTick+0x174>)
 8004062:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <xTaskIncrementTick+0x178>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004070:	697b      	ldr	r3, [r7, #20]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000458 	.word	0x20000458
 8004080:	20000434 	.word	0x20000434
 8004084:	200003e8 	.word	0x200003e8
 8004088:	200003ec 	.word	0x200003ec
 800408c:	20000448 	.word	0x20000448
 8004090:	20000450 	.word	0x20000450
 8004094:	20000438 	.word	0x20000438
 8004098:	20000334 	.word	0x20000334
 800409c:	20000330 	.word	0x20000330
 80040a0:	20000440 	.word	0x20000440
 80040a4:	20000444 	.word	0x20000444

080040a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <vTaskSwitchContext+0xa0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <vTaskSwitchContext+0xa4>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040bc:	e03f      	b.n	800413e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <vTaskSwitchContext+0xa4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040c4:	4b22      	ldr	r3, [pc, #136]	; (8004150 <vTaskSwitchContext+0xa8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	f1c3 031f 	rsb	r3, r3, #31
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	491e      	ldr	r1, [pc, #120]	; (8004154 <vTaskSwitchContext+0xac>)
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <vTaskSwitchContext+0x5a>
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <vTaskSwitchContext+0xac>)
 8004110:	4413      	add	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3308      	adds	r3, #8
 8004126:	429a      	cmp	r2, r3
 8004128:	d104      	bne.n	8004134 <vTaskSwitchContext+0x8c>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <vTaskSwitchContext+0xb0>)
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000458 	.word	0x20000458
 800414c:	20000444 	.word	0x20000444
 8004150:	20000438 	.word	0x20000438
 8004154:	20000334 	.word	0x20000334
 8004158:	20000330 	.word	0x20000330

0800415c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <vTaskPlaceOnEventList+0x44>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3318      	adds	r3, #24
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe fe62 	bl	8002e54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004190:	2101      	movs	r1, #1
 8004192:	6838      	ldr	r0, [r7, #0]
 8004194:	f000 fa6a 	bl	800466c <prvAddCurrentTaskToDelayedList>
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000330 	.word	0x20000330

080041a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60fb      	str	r3, [r7, #12]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3318      	adds	r3, #24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fe75 	bl	8002ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <xTaskRemoveFromEventList+0xac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11c      	bne.n	800421c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fe6c 	bl	8002ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	2201      	movs	r2, #1
 80041f2:	409a      	lsls	r2, r3
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <xTaskRemoveFromEventList+0xb0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <xTaskRemoveFromEventList+0xb0>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <xTaskRemoveFromEventList+0xb4>)
 800420c:	441a      	add	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fe fdfa 	bl	8002e0e <vListInsertEnd>
 800421a:	e005      	b.n	8004228 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3318      	adds	r3, #24
 8004220:	4619      	mov	r1, r3
 8004222:	480e      	ldr	r0, [pc, #56]	; (800425c <xTaskRemoveFromEventList+0xb8>)
 8004224:	f7fe fdf3 	bl	8002e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <xTaskRemoveFromEventList+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d905      	bls.n	8004242 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <xTaskRemoveFromEventList+0xc0>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e001      	b.n	8004246 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004246:	697b      	ldr	r3, [r7, #20]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000458 	.word	0x20000458
 8004254:	20000438 	.word	0x20000438
 8004258:	20000334 	.word	0x20000334
 800425c:	200003f0 	.word	0x200003f0
 8004260:	20000330 	.word	0x20000330
 8004264:	20000444 	.word	0x20000444

08004268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <vTaskInternalSetTimeOutState+0x24>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <vTaskInternalSetTimeOutState+0x28>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	605a      	str	r2, [r3, #4]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000448 	.word	0x20000448
 8004290:	20000434 	.word	0x20000434

08004294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	613b      	str	r3, [r7, #16]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042d6:	f000 fb21 	bl	800491c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <xTaskCheckForTimeOut+0xbc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d102      	bne.n	80042fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e023      	b.n	8004342 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <xTaskCheckForTimeOut+0xc0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d007      	beq.n	8004316 <xTaskCheckForTimeOut+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e015      	b.n	8004342 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	429a      	cmp	r2, r3
 800431e:	d20b      	bcs.n	8004338 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff9b 	bl	8004268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e004      	b.n	8004342 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004342:	f000 fb1b 	bl	800497c <vPortExitCritical>

	return xReturn;
 8004346:	69fb      	ldr	r3, [r7, #28]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000434 	.word	0x20000434
 8004354:	20000448 	.word	0x20000448

08004358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <vTaskMissedYield+0x14>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000444 	.word	0x20000444

08004370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004378:	f000 f852 	bl	8004420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvIdleTask+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d9f9      	bls.n	8004378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvIdleTask+0x2c>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004394:	e7f0      	b.n	8004378 <prvIdleTask+0x8>
 8004396:	bf00      	nop
 8004398:	20000334 	.word	0x20000334
 800439c:	e000ed04 	.word	0xe000ed04

080043a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	e00c      	b.n	80043c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a12      	ldr	r2, [pc, #72]	; (8004400 <prvInitialiseTaskLists+0x60>)
 80043b8:	4413      	add	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fcfc 	bl	8002db8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d9ef      	bls.n	80043ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043cc:	480d      	ldr	r0, [pc, #52]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ce:	f7fe fcf3 	bl	8002db8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043d2:	480d      	ldr	r0, [pc, #52]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043d4:	f7fe fcf0 	bl	8002db8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <prvInitialiseTaskLists+0x6c>)
 80043da:	f7fe fced 	bl	8002db8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043de:	480c      	ldr	r0, [pc, #48]	; (8004410 <prvInitialiseTaskLists+0x70>)
 80043e0:	f7fe fcea 	bl	8002db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <prvInitialiseTaskLists+0x74>)
 80043e6:	f7fe fce7 	bl	8002db8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <prvInitialiseTaskLists+0x78>)
 80043ec:	4a05      	ldr	r2, [pc, #20]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvInitialiseTaskLists+0x7c>)
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000334 	.word	0x20000334
 8004404:	200003c0 	.word	0x200003c0
 8004408:	200003d4 	.word	0x200003d4
 800440c:	200003f0 	.word	0x200003f0
 8004410:	20000404 	.word	0x20000404
 8004414:	2000041c 	.word	0x2000041c
 8004418:	200003e8 	.word	0x200003e8
 800441c:	200003ec 	.word	0x200003ec

08004420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004426:	e019      	b.n	800445c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004428:	f000 fa78 	bl	800491c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <prvCheckTasksWaitingTermination+0x50>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fd43 	bl	8002ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 8004446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 8004450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004452:	f000 fa93 	bl	800497c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f810 	bl	800447c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e1      	bne.n	8004428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000404 	.word	0x20000404
 8004474:	20000430 	.word	0x20000430
 8004478:	20000418 	.word	0x20000418

0800447c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fc06 	bl	8004ca4 <vPortFree>
				vPortFree( pxTCB );
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fc03 	bl	8004ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800449e:	e018      	b.n	80044d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d103      	bne.n	80044b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fbfa 	bl	8004ca4 <vPortFree>
	}
 80044b0:	e00f      	b.n	80044d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d00a      	beq.n	80044d2 <prvDeleteTCB+0x56>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60fb      	str	r3, [r7, #12]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <prvDeleteTCB+0x54>
	}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <prvResetNextTaskUnblockTime+0x40>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <prvResetNextTaskUnblockTime+0x14>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <prvResetNextTaskUnblockTime+0x16>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <prvResetNextTaskUnblockTime+0x44>)
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044fe:	e008      	b.n	8004512 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <prvResetNextTaskUnblockTime+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvResetNextTaskUnblockTime+0x44>)
 8004510:	6013      	str	r3, [r2, #0]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	200003e8 	.word	0x200003e8
 8004520:	20000450 	.word	0x20000450

08004524 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <xTaskGetSchedulerState+0x34>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004532:	2301      	movs	r3, #1
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	e008      	b.n	800454a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <xTaskGetSchedulerState+0x38>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004540:	2302      	movs	r3, #2
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	e001      	b.n	800454a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800454a:	687b      	ldr	r3, [r7, #4]
	}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2000043c 	.word	0x2000043c
 800455c:	20000458 	.word	0x20000458

08004560 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d06e      	beq.n	8004654 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004576:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <xTaskPriorityDisinherit+0x100>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d00a      	beq.n	8004596 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60bb      	str	r3, [r7, #8]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d044      	beq.n	8004654 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d140      	bne.n	8004654 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fc74 	bl	8002ec4 <uxListRemove>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d115      	bne.n	800460e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e6:	491f      	ldr	r1, [pc, #124]	; (8004664 <xTaskPriorityDisinherit+0x104>)
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xTaskPriorityDisinherit+0xae>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2201      	movs	r2, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43da      	mvns	r2, r3
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <xTaskPriorityDisinherit+0x108>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <xTaskPriorityDisinherit+0x108>)
 800460c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f1c3 0207 	rsb	r2, r3, #7
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	2201      	movs	r2, #1
 8004628:	409a      	lsls	r2, r3
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <xTaskPriorityDisinherit+0x108>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <xTaskPriorityDisinherit+0x108>)
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4a08      	ldr	r2, [pc, #32]	; (8004664 <xTaskPriorityDisinherit+0x104>)
 8004642:	441a      	add	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f7fe fbdf 	bl	8002e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004654:	697b      	ldr	r3, [r7, #20]
	}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000330 	.word	0x20000330
 8004664:	20000334 	.word	0x20000334
 8004668:	20000438 	.word	0x20000438

0800466c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004676:	4b29      	ldr	r3, [pc, #164]	; (800471c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800467c:	4b28      	ldr	r3, [pc, #160]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3304      	adds	r3, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fc1e 	bl	8002ec4 <uxListRemove>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	2201      	movs	r2, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43da      	mvns	r2, r3
 800469c:	4b21      	ldr	r3, [pc, #132]	; (8004724 <prvAddCurrentTaskToDelayedList+0xb8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4013      	ands	r3, r2
 80046a2:	4a20      	ldr	r2, [pc, #128]	; (8004724 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d10a      	bne.n	80046c4 <prvAddCurrentTaskToDelayedList+0x58>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	481a      	ldr	r0, [pc, #104]	; (8004728 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046be:	f7fe fba6 	bl	8002e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046c2:	e026      	b.n	8004712 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046cc:	4b14      	ldr	r3, [pc, #80]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d209      	bcs.n	80046f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <prvAddCurrentTaskToDelayedList+0xc0>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe fbb3 	bl	8002e54 <vListInsert>
}
 80046ee:	e010      	b.n	8004712 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <prvAddCurrentTaskToDelayedList+0xc4>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe fba9 	bl	8002e54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	d202      	bcs.n	8004712 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <prvAddCurrentTaskToDelayedList+0xc8>)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6013      	str	r3, [r2, #0]
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000434 	.word	0x20000434
 8004720:	20000330 	.word	0x20000330
 8004724:	20000438 	.word	0x20000438
 8004728:	2000041c 	.word	0x2000041c
 800472c:	200003ec 	.word	0x200003ec
 8004730:	200003e8 	.word	0x200003e8
 8004734:	20000450 	.word	0x20000450

08004738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3b04      	subs	r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b04      	subs	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b04      	subs	r3, #4
 8004766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004768:	4a08      	ldr	r2, [pc, #32]	; (800478c <pxPortInitialiseStack+0x54>)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b14      	subs	r3, #20
 8004772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b20      	subs	r3, #32
 800477e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	08004791 	.word	0x08004791

08004790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <prvTaskExitError+0x54>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d00a      	beq.n	80047ba <prvTaskExitError+0x2a>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60fb      	str	r3, [r7, #12]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <prvTaskExitError+0x28>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ce:	bf00      	nop
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0fc      	beq.n	80047d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000000c 	.word	0x2000000c
	...

080047f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <pxCurrentTCBConst2>)
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047fa:	f380 8809 	msr	PSP, r0
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8811 	msr	BASEPRI, r0
 800480a:	f04e 0e0d 	orr.w	lr, lr, #13
 800480e:	4770      	bx	lr

08004810 <pxCurrentTCBConst2>:
 8004810:	20000330 	.word	0x20000330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004818:	4806      	ldr	r0, [pc, #24]	; (8004834 <prvPortStartFirstTask+0x1c>)
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f380 8808 	msr	MSP, r0
 8004822:	b662      	cpsie	i
 8004824:	b661      	cpsie	f
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	df00      	svc	0
 8004830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004832:	bf00      	nop
 8004834:	e000ed08 	.word	0xe000ed08

08004838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <xPortStartScheduler+0xd0>)
 8004840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	22ff      	movs	r2, #255	; 0xff
 800484e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <xPortStartScheduler+0xd4>)
 8004864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <xPortStartScheduler+0xd8>)
 8004868:	2207      	movs	r2, #7
 800486a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800486c:	e009      	b.n	8004882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <xPortStartScheduler+0xd8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3b01      	subs	r3, #1
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <xPortStartScheduler+0xd8>)
 8004876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d0ef      	beq.n	800486e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <xPortStartScheduler+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1c3 0307 	rsb	r3, r3, #7
 8004896:	2b04      	cmp	r3, #4
 8004898:	d00a      	beq.n	80048b0 <xPortStartScheduler+0x78>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60bb      	str	r3, [r7, #8]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <xPortStartScheduler+0xd8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <xPortStartScheduler+0xd8>)
 80048b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <xPortStartScheduler+0xd8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <xPortStartScheduler+0xd8>)
 80048c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <xPortStartScheduler+0xdc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <xPortStartScheduler+0xdc>)
 80048d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <xPortStartScheduler+0xdc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <xPortStartScheduler+0xdc>)
 80048e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048e6:	f000 f8b9 	bl	8004a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <xPortStartScheduler+0xe0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048f0:	f7ff ff92 	bl	8004818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048f4:	f7ff fbd8 	bl	80040a8 <vTaskSwitchContext>
	prvTaskExitError();
 80048f8:	f7ff ff4a 	bl	8004790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000e400 	.word	0xe000e400
 800490c:	2000045c 	.word	0x2000045c
 8004910:	20000460 	.word	0x20000460
 8004914:	e000ed20 	.word	0xe000ed20
 8004918:	2000000c 	.word	0x2000000c

0800491c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
}
 8004934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <vPortEnterCritical+0x58>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <vPortEnterCritical+0x58>)
 800493e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <vPortEnterCritical+0x58>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10f      	bne.n	8004968 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <vPortEnterCritical+0x5c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <vPortEnterCritical+0x4c>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	603b      	str	r3, [r7, #0]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <vPortEnterCritical+0x4a>
	}
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <vPortExitCritical+0x4c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <vPortExitCritical+0x24>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	607b      	str	r3, [r7, #4]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <vPortExitCritical+0x4c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <vPortExitCritical+0x4c>)
 80049a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <vPortExitCritical+0x4c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <vPortExitCritical+0x42>
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
}
 80049bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	00000000 	.word	0x00000000

080049d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049d0:	f3ef 8009 	mrs	r0, PSP
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <pxCurrentTCBConst>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049e0:	6010      	str	r0, [r2, #0]
 80049e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049ea:	f380 8811 	msr	BASEPRI, r0
 80049ee:	f7ff fb5b 	bl	80040a8 <vTaskSwitchContext>
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8811 	msr	BASEPRI, r0
 80049fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a06:	f380 8809 	msr	PSP, r0
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	4770      	bx	lr

08004a10 <pxCurrentTCBConst>:
 8004a10:	20000330 	.word	0x20000330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a32:	f7ff fa7b 	bl	8003f2c <xTaskIncrementTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <SysTick_Handler+0x40>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
}
 8004a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <vPortSetupTimerInterrupt+0x30>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <vPortSetupTimerInterrupt+0x38>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <vPortSetupTimerInterrupt+0x3c>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <vPortSetupTimerInterrupt+0x40>)
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a7e:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <vPortSetupTimerInterrupt+0x30>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e010 	.word	0xe000e010
 8004a90:	e000e018 	.word	0xe000e018
 8004a94:	20000000 	.word	0x20000000
 8004a98:	10624dd3 	.word	0x10624dd3
 8004a9c:	e000e014 	.word	0xe000e014

08004aa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004aa6:	f3ef 8305 	mrs	r3, IPSR
 8004aaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d914      	bls.n	8004adc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <vPortValidateInterruptPriority+0x6c>)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <vPortValidateInterruptPriority+0x70>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	7afa      	ldrb	r2, [r7, #11]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20a      	bcs.n	8004adc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	607b      	str	r3, [r7, #4]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <vPortValidateInterruptPriority+0x74>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <vPortValidateInterruptPriority+0x78>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d90a      	bls.n	8004b02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	603b      	str	r3, [r7, #0]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <vPortValidateInterruptPriority+0x60>
	}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e3f0 	.word	0xe000e3f0
 8004b10:	2000045c 	.word	0x2000045c
 8004b14:	e000ed0c 	.word	0xe000ed0c
 8004b18:	20000460 	.word	0x20000460

08004b1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b28:	f7ff f956 	bl	8003dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b2c:	4b58      	ldr	r3, [pc, #352]	; (8004c90 <pvPortMalloc+0x174>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b34:	f000 f910 	bl	8004d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b38:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <pvPortMalloc+0x178>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 808e 	bne.w	8004c62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01d      	beq.n	8004b88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	3308      	adds	r3, #8
 8004b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <pvPortMalloc+0x6c>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	617b      	str	r3, [r7, #20]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d069      	beq.n	8004c62 <pvPortMalloc+0x146>
 8004b8e:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <pvPortMalloc+0x17c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d864      	bhi.n	8004c62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b98:	4b40      	ldr	r3, [pc, #256]	; (8004c9c <pvPortMalloc+0x180>)
 8004b9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b9c:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba2:	e004      	b.n	8004bae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d903      	bls.n	8004bc0 <pvPortMalloc+0xa4>
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f1      	bne.n	8004ba4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bc0:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <pvPortMalloc+0x174>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d04b      	beq.n	8004c62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	2308      	movs	r3, #8
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d91f      	bls.n	8004c2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <pvPortMalloc+0xf8>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	613b      	str	r3, [r7, #16]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c26:	69b8      	ldr	r0, [r7, #24]
 8004c28:	f000 f8f8 	bl	8004e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <pvPortMalloc+0x184>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d203      	bcs.n	8004c4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <pvPortMalloc+0x184>)
 8004c4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <pvPortMalloc+0x178>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c62:	f7ff f8c7 	bl	8003df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <pvPortMalloc+0x16a>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <pvPortMalloc+0x168>
	return pvReturn;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3728      	adds	r7, #40	; 0x28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	2000106c 	.word	0x2000106c
 8004c94:	20001078 	.word	0x20001078
 8004c98:	20001070 	.word	0x20001070
 8004c9c:	20001064 	.word	0x20001064
 8004ca0:	20001074 	.word	0x20001074

08004ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d048      	beq.n	8004d48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	425b      	negs	r3, r3
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <vPortFree+0xac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <vPortFree+0x44>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <vPortFree+0x62>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <vPortFree+0xac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d115      	bne.n	8004d48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortFree+0xac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	401a      	ands	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d2c:	f7ff f854 	bl	8003dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <vPortFree+0xb0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <vPortFree+0xb0>)
 8004d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d3e:	6938      	ldr	r0, [r7, #16]
 8004d40:	f000 f86c 	bl	8004e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d44:	f7ff f856 	bl	8003df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20001078 	.word	0x20001078
 8004d54:	20001070 	.word	0x20001070

08004d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <prvHeapInit+0xac>)
 8004d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3307      	adds	r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <prvHeapInit+0xac>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <prvHeapInit+0xb0>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <prvHeapInit+0xb0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da4:	2208      	movs	r2, #8
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <prvHeapInit+0xb4>)
 8004db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <prvHeapInit+0xb4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <prvHeapInit+0xb4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <prvHeapInit+0xb4>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <prvHeapInit+0xb8>)
 8004de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <prvHeapInit+0xbc>)
 8004dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <prvHeapInit+0xc0>)
 8004df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df6:	601a      	str	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000464 	.word	0x20000464
 8004e08:	20001064 	.word	0x20001064
 8004e0c:	2000106c 	.word	0x2000106c
 8004e10:	20001074 	.word	0x20001074
 8004e14:	20001070 	.word	0x20001070
 8004e18:	20001078 	.word	0x20001078

08004e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <prvInsertBlockIntoFreeList+0xa8>)
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e002      	b.n	8004e30 <prvInsertBlockIntoFreeList+0x14>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d8f7      	bhi.n	8004e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d108      	bne.n	8004e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d118      	bne.n	8004ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvInsertBlockIntoFreeList+0xac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d00d      	beq.n	8004e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e008      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvInsertBlockIntoFreeList+0xac>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e003      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d002      	beq.n	8004eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	20001064 	.word	0x20001064
 8004ec8:	2000106c 	.word	0x2000106c

08004ecc <memcmp>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	3901      	subs	r1, #1
 8004ed0:	4402      	add	r2, r0
 8004ed2:	4290      	cmp	r0, r2
 8004ed4:	d101      	bne.n	8004eda <memcmp+0xe>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e005      	b.n	8004ee6 <memcmp+0x1a>
 8004eda:	7803      	ldrb	r3, [r0, #0]
 8004edc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	d001      	beq.n	8004ee8 <memcmp+0x1c>
 8004ee4:	1b18      	subs	r0, r3, r4
 8004ee6:	bd10      	pop	{r4, pc}
 8004ee8:	3001      	adds	r0, #1
 8004eea:	e7f2      	b.n	8004ed2 <memcmp+0x6>

08004eec <memset>:
 8004eec:	4603      	mov	r3, r0
 8004eee:	4402      	add	r2, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	2600      	movs	r6, #0
 8004f00:	4d0c      	ldr	r5, [pc, #48]	; (8004f34 <__libc_init_array+0x38>)
 8004f02:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f04:	1b64      	subs	r4, r4, r5
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	f000 f830 	bl	8004f70 <_init>
 8004f10:	2600      	movs	r6, #0
 8004f12:	4d0a      	ldr	r5, [pc, #40]	; (8004f3c <__libc_init_array+0x40>)
 8004f14:	4c0a      	ldr	r4, [pc, #40]	; (8004f40 <__libc_init_array+0x44>)
 8004f16:	1b64      	subs	r4, r4, r5
 8004f18:	10a4      	asrs	r4, r4, #2
 8004f1a:	42a6      	cmp	r6, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f24:	4798      	blx	r3
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	3601      	adds	r6, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	08005070 	.word	0x08005070
 8004f38:	08005070 	.word	0x08005070
 8004f3c:	08005070 	.word	0x08005070
 8004f40:	08005074 	.word	0x08005074

08004f44 <strcpy>:
 8004f44:	4603      	mov	r3, r0
 8004f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f4a:	f803 2b01 	strb.w	r2, [r3], #1
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	d1f9      	bne.n	8004f46 <strcpy+0x2>
 8004f52:	4770      	bx	lr

08004f54 <memcpy>:
 8004f54:	440a      	add	r2, r1
 8004f56:	4291      	cmp	r1, r2
 8004f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f5c:	d100      	bne.n	8004f60 <memcpy+0xc>
 8004f5e:	4770      	bx	lr
 8004f60:	b510      	push	{r4, lr}
 8004f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6c:	d1f9      	bne.n	8004f62 <memcpy+0xe>
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
